/*!
 * Copyright (c) 2015-2017 Cisco Systems, Inc. See LICENSE file.
 */

import { SparkPlugin, Page } from '@ciscospark/spark-core';
import {
  WEBEX_API_EVENTS,
  API_ACTIVITY_TYPE,
  API_ACTIVITY_VERB,
  constructHydraId,
  hydraTypes
} from '@ciscospark/common';

const debug = require('debug')('memberships');

const MEMBERSHIP_CREATED = 'created';
const MEMBERSHIP_DELETED = 'deleted';
const MEMBERSHIP_UPDATED = 'updated';
const CONVERSATION_ACTIVITY = 'event:conversation.activity';

/**
 * @typedef {Object} MembershipObject
 * @property {string} id - Unique identifier for the membership
 * @property {string} roomId - The room ID
 * @property {string} personId - The person ID
 * @property {email} personEmail - The email address of the person / room member
 * @property {boolean} isModerator - Indicates whether the specified person should be a room moderator
 * @property {boolean} isMonitor - Indicates whether the specified member is a room monitor
 * @property {isoDate} created - The date and time that this membership was created
 */

/**
 * Memberships represent a person's relationship to a room. Use this API to list
 * members of any room that you're in or create memberships to invite someone
 * to a room. Memberships can also be updated to make someone a moderator
 * or deleted to remove them from the room.
 * @class
 * @name Memberships
 */
const Memberships = SparkPlugin.extend({
  /**
   * Connect to the web socket to listen to incoming messages.
   * @returns {Promise}
   */
  listen() {
    // Create a common envelope that we will wrap all events in
    this.eventEnvelope = {
      resource: 'memberships',
      // orgId -- TODO get from this.spark.internal.user
      // createdBy -- TODO get from this.spark.internal.user
      ownedBy: 'creator',
      status: 'active',
      created: new Date().toISOString(),
      data: {}
    };
    // Register to listen to events
    return this.spark.internal.mercury.connect()
      .then(() => this.listenTo(this.spark.internal.mercury, CONVERSATION_ACTIVITY,
        (event) => this.onWebexApiEvent(event)));
  },

  /**
   * Trigger a membership related events.
   * @param {Object} event
   * @returns {undefined}
   */
  onWebexApiEvent(event) {
    const {activity} = event.data;
    console.log(activity);

    // Reply activities are not currently supported
    if (activity.type === API_ACTIVITY_TYPE.REPLY) {
      return;
    }

    /* eslint-disable no-case-declarations */
    // eslint-disable-next-line padding-line-between-statements
    switch (activity.verb) {
      case API_ACTIVITY_VERB.ADD:
        const membershipCreatedEventData = this.getCreatedEvent(activity);
        debug(`membership "created" payload: ${JSON.stringify(membershipCreatedEventData)}`);
        this.trigger(MEMBERSHIP_CREATED, membershipCreatedEventData);
        break;

      case API_ACTIVITY_VERB.LEAVE:
        const membershipDeletedEventData = this.getDeletedEvent(activity);
        debug(`membership "deleted" payload: ${JSON.stringify(membershipDeletedEventData)}`);
        this.trigger(MEMBERSHIP_DELETED, membershipDeletedEventData);
        break;

      case API_ACTIVITY_VERB.ACKNOWLEDGE:
      case API_ACTIVITY_VERB.ADD_MODERATOR:
      case API_ACTIVITY_VERB.REMOVE_MODERATOR:
        const membershipUpdatedEventData = this.getUpdatedEvent(activity);
        debug(`membership "updated" payload: ${JSON.stringify(membershipUpdatedEventData)}`);
        this.trigger(MEMBERSHIP_UPDATED, membershipUpdatedEventData);
        break;

      default:
        break;
    }
  },

  /**
   * Constructs event data object for the "membership created" event,
   * adhering to Hydra's Webehook data for an "created" event on the "membership" resource.
   * @param {Object} activity from mercury
   * @returns {Object} constructed event
   */
  getCreatedEvent(activity) {
    const sdkEvent = this.getCommonSdkEvent(activity);
    sdkEvent.event = MEMBERSHIP_CREATED;
    return sdkEvent;
  },

  /**
   * Constructs event data object for the "membership deleted" event,
   * adhering to Hydra's Webehook data for an "deleted" event on the "membership" resource.
   * @param {Object} activity from mercury
   * @returns {Object} constructed event
   */
  getDeletedEvent(activity) {
    const sdkEvent = this.getCommonSdkEvent(activity);
    sdkEvent.event = MEMBERSHIP_DELETED;
    return sdkEvent;
  },

  /**
   * Constructs event data object for the "membership updated" event,
   * adhering to Hydra's Webehook data for an "updated" event on the "membership" resource.
   * we add a field "lastSeenId" not yet available in the webhooks if this is an acknowledge actvtity
   * @param {Object} activity from mercury
   * @returns {Object} constructed event
   */
  getUpdatedEvent(activity) {
    const sdkEvent = this.getCommonSdkEvent(activity);
    sdkEvent.event = MEMBERSHIP_UPDATED;
    if (activity.verb === API_ACTIVITY_VERB.ACKNOWLEDGE) {
      sdkEvent.data.lastSeenId = constructHydraId(hydraTypes.MESSAGE, activity.object.id);
    }
    sdkEvent.data.created = activity.published;
    return sdkEvent;
  },

  /**
   * Constructs common event data object for all membership events
   * @param {Object} activity from mercury
   * @returns {Object} constructed event
   */
  getCommonSdkEvent(activity) {
    const sdkEvent = JSON.parse(JSON.stringify(this.eventEnvelope));
    sdkEvent.actorId = constructHydraId(hydraTypes.PEOPLE, activity.actor.id);
    sdkEvent.data.roomId = constructHydraId(hydraTypes.ROOM, activity.target.id);
    sdkEvent.data.roomType = activity.target.tags.includes('ONE_ON_ONE') ? 'direct' : 'group';
    if (activity.verb !== API_ACTIVITY_VERB.ACKNOWLEDGE) {
      // For most memberships events the person is the one whose membership it is
      sdkEvent.data.id = constructHydraId(hydraTypes.MEMBERSHIP,
        activity.object.entryUUID + ':' + activity.target.id);
      sdkEvent.data.personId = constructHydraId(hydraTypes.PEOPLE, activity.object.entryUUID);
      sdkEvent.data.personEmail = activity.object.emailAddress || activity.object.entryEmail;
      sdkEvent.data.personDisplayName = activity.object.displayName;
      sdkEvent.data.personOrgId = constructHydraId(hydraTypes.ORGANIZATION, activity.actor.orgId);
    } else {
      // For a read receipt the person is the "actor" or the one who did the reading
      sdkEvent.data.id = constructHydraId(hydraTypes.MEMBERSHIP,
        activity.actor.entryUUID + ':' + activity.target.id);  
      sdkEvent.data.personId = constructHydraId(hydraTypes.PEOPLE, activity.actor.entryUUID);
      sdkEvent.data.personEmail = activity.actor.emailAddress || activity.actor.entryEmail;
      sdkEvent.data.personDisplayName = activity.actor.displayName;
      sdkEvent.data.personOrgId = constructHydraId(hydraTypes.ORGANIZATION, activity.actor.orgId);
    }
    if ((activity.object.roomProperties) && (activity.object.roomProperties.isModerator)) {
      sdkEvent.data.isModerator = true;
    } else {
      sdkEvent.data.isModerator = false;
    }
    sdkEvent.data.isMonitor = false;
    // isRoomHidden
    return sdkEvent;
  },


  /**
   * Adds a person to a room. The person can be added by ID (`personId`) or by
   * Email Address (`personEmail`). The person can be optionally added to the room
   * as a moderator.
   * @instance
   * @memberof Memberships
   * @param {MembershipObject} membership
   * @returns {Promise<MembershipObject>}
   * @example
   * ciscospark.rooms.create({title: 'Create Membership Example'})
   *   .then(function(room) {
   *     return ciscospark.memberships.create({
   *      personEmail: 'alice@example.com',
   *      roomId: room.id
   *    });
   *   })
   *   .then(function(membership) {
   *     var assert = require('assert');
   *     assert(membership.id);
   *     assert(membership.roomId);
   *     assert(membership.personId);
   *     assert(membership.personEmail);
   *     assert('isModerator' in membership);
   *     assert('isMonitor' in membership);
   *     assert(membership.created);
   *     return 'success';
   *   });
   *   // => success
   */
  create(membership) {
    return this.request({
      method: 'POST',
      service: 'hydra',
      resource: 'memberships',
      body: membership
    })
      .then((res) => res.body);
  },

  /**
   * Returns a single membership.
   * @instance
   * @memberof Memberships
   * @param {MembershipObject|uuid} membership
   * @returns {Promise<MembershipObject>}
   * @example
   * var membership;
   * ciscospark.rooms.create({title: 'Get Membership Example'})
   *   .then(function(room) {
   *     return ciscospark.memberships.create({
   *       personEmail: 'alice@example.com',
   *       roomId: room.id
   *     });
   *   })
   *   .then(function(m) {
   *     membership = m;
   *     return ciscospark.memberships.get(m.id);
   *   })
   *   .then(function(m) {
   *     var assert = require('assert');
   *     assert.deepEqual(m, membership);
   *     return 'success';
   *   });
   *   // => success
   */
  get(membership) {
    const id = membership.id || membership;

    return this.request({
      service: 'hydra',
      resource: `memberships/${id}`
    })
      .then((res) => res.body.items || res.body);
  },

  /**
   * Returns a list of memberships. In most cases the results will only contain
   * rooms that the authentiated user is a member of. You can filter the results
   * by room to list people in a room or by person to find rooms that a
   * specific person is a member of.
   * @instance
   * @memberof Memberships
   * @param {Object} options
   * @param {string} options.personId
   * @param {string} options.personEmail
   * @param {string} options.roomId
   * @param {number} options.max
   * @returns {Promise<Page<MembershipObject>>}
   * @example
   * var room;
   * ciscospark.rooms.create({title: 'List Membership Example'})
   *   .then(function(r) {
   *     room = r;
   *     return ciscospark.memberships.create({
   *      personEmail: 'alice@example.com',
   *      roomId: room.id
   *     });
   *   })
   *   .then(function() {
   *     return ciscospark.memberships.list({roomId: room.id});
   *   })
   *   .then(function(memberships) {
   *     var assert = require('assert');
   *     assert.equal(memberships.length, 2);
   *     for (var i = 0; i < memberships.length; i+= 1) {
   *       assert.equal(memberships.items[i].roomId, room.id);
   *     }
   *     return 'success';
   *   });
   *   // => success
   */
  list(options) {
    return this.request({
      service: 'hydra',
      resource: 'memberships',
      qs: options
    })
      .then((res) => new Page(res, this.spark));
  },

  /**
   * Deletes a single membership.
   * @instance
   * @memberof Memberships
   * @param {MembershipObject|uuid} membership
   * @returns {Promise}
   * @example
   * var membership, room;
   * ciscospark.rooms.create({title: 'Remove Membership Example'})
   *   .then(function(r) {
   *     room = r;
   *     return ciscospark.memberships.create({
   *      personEmail: 'alice@example.com',
   *      roomId: room.id
   *     });
   *   })
   *   .then(function(m) {
   *     membership = m;
   *     return ciscospark.memberships.list({roomId: room.id});
   *   })
   *   .then(function(memberships) {
   *     var assert = require('assert');
   *     assert.equal(memberships.length, 2);
   *     return ciscospark.memberships.remove(membership);
   *   })
   *   .then(function() {
   *     return ciscospark.memberships.list({roomId: room.id});
   *   })
   *   .then(function(memberships) {
   *     var assert = require('assert');
   *     assert.equal(memberships.length, 1);
   *     return 'success';
   *   });
   *   // => success
   */
  remove(membership) {
    const id = membership.id || membership;

    return this.request({
      method: 'DELETE',
      service: 'hydra',
      resource: `memberships/${id}`
    })
      .then((res) => {
        // Firefox has some issues with 204s and/or DELETE. This should move to
        // http-core
        if (res.statusCode === 204) {
          return undefined;
        }

        return res.body;
      });
  },

  /**
   * Used to update a single membership's properties
   * @instance
   * @memberof Memberships
   * @param {MembershipObject|uuid} membership
   * @returns {Promise<MembershipObject>}
   * @example
   * var membership, room;
   * ciscospark.rooms.create({title: 'Memberships Example'})
   *   .then(function(r) {
   *     room = r;
   *     return ciscospark.memberships.list({roomId: room.id});
   *   })
   *   .then(function(memberships) {
   *     membership = memberships.items[0];
   *     var assert = require('assert');
   *     assert.equal(membership.isModerator, false);
   *     membership.isModerator = true;
   *     return ciscospark.memberships.update(membership);
   *   })
   *   .then(function() {
   *     return ciscospark.memberships.get(membership.id);
   *   })
   *   .then(function(membership) {
   *     var assert = require('assert');
   *     assert.equal(membership.isModerator, true);
   *     return 'success';
   *   });
   *   // => success
   */
  update(membership) {
    const id = membership.id || membership;

    return this.request({
      method: 'PUT',
      service: 'hydra',
      resource: `memberships/${id}`,
      body: membership
    })
      .then((res) => res.body);
  }
});

export default Memberships;
